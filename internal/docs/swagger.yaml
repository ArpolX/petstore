basePath: /
definitions:
  internal_modules_order_controller.Order:
    properties:
      complete:
        type: boolean
      id:
        minimum: 1
        type: integer
      petId:
        type: integer
      quantity:
        type: integer
      shipDate:
        type: string
      status:
        type: string
    required:
    - complete
    - id
    - petId
    - quantity
    - shipDate
    - status
    type: object
  internal_modules_pet_controller.Category:
    properties:
      id:
        maximum: 2
        minimum: 1
        type: integer
    required:
    - id
    type: object
  internal_modules_pet_controller.OutputPet:
    properties:
      category_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      photoUrl:
        type: string
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/internal_modules_pet_controller.OutputTag'
        type: array
    type: object
  internal_modules_pet_controller.OutputPetArray:
    properties:
      pets:
        items:
          $ref: '#/definitions/internal_modules_pet_controller.OutputPet'
        type: array
    type: object
  internal_modules_pet_controller.OutputTag:
    properties:
      id:
        type: integer
    type: object
  internal_modules_pet_controller.Pet:
    properties:
      category:
        $ref: '#/definitions/internal_modules_pet_controller.Category'
      id:
        type: integer
      name:
        type: string
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/internal_modules_pet_controller.Tag'
        type: array
    required:
    - category
    - id
    - name
    - status
    - tags
    type: object
  internal_modules_pet_controller.Tag:
    properties:
      id:
        maximum: 3
        minimum: 1
        type: integer
    required:
    - id
    type: object
  internal_modules_user_controller.User:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    - phone
    - username
    type: object
  internal_modules_user_controller.UserArray:
    properties:
      user:
        items:
          $ref: '#/definitions/internal_modules_user_controller.User'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: |-
    Зоомагазин, который работает с тремя основными сущностями: пользователь, животное и магазин.
    Здесь доступны CRUD-операции над всеми сущностями, мягкая работа с пользователем (проставление дат действий), авторизация и выход из системы с помощью чёрного списка, загрузка изображения и сохранение локально на сервере. Это самые интересные возможности, попробуйте сами
  title: Petstore
  version: "1.0"
paths:
  /pet/:
    post:
      consumes:
      - application/json
      description: 'Создание и добавление нового питомца с различными полями. Отсчёт
        будет идти от id (не должен повторяться). В категориях и тегах указывается
        только id. Категории: 1 - dog, 2 - cat. Tags: 1 - friendly, 2 - wild, 3 -
        trained. Также доступно 3 статуса: available, sold и pending'
      parameters:
      - description: Заполни все поля для добавления
        in: body
        name: pet
        required: true
        schema:
          $ref: '#/definitions/internal_modules_pet_controller.Pet'
      produces:
      - text/plain
      responses:
        "200":
          description: Успешное добавление или не ошибочное сообщение
          schema:
            type: string
        "400":
          description: Неверной формат
          schema:
            type: string
        "401":
          description: Аутентификация не пройдена
          schema:
            type: string
        "403":
          description: Авторизация не пройдена
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Добавить нового питомца в магазин
      tags:
      - pet
    put:
      consumes:
      - application/json
      description: 'Обновить информацию, id и фото изменить нельзя. Категории: 1 -
        dog, 2 - cat. Tags: 1 - friendly, 2 - wild, 3 - trained'
      parameters:
      - description: Заполни все поля для изменения
        in: body
        name: pet
        required: true
        schema:
          $ref: '#/definitions/internal_modules_pet_controller.Pet'
      produces:
      - text/plain
      responses:
        "200":
          description: Успешное обновление информации или не ошибочное сообщение
          schema:
            type: string
        "400":
          description: Неверной формат
          schema:
            type: string
        "401":
          description: Аутентификация не пройдена
          schema:
            type: string
        "403":
          description: Авторизация не пройдена
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Обновить информацию о питомце
      tags:
      - pet
  /pet/{petId}:
    delete:
      consumes:
      - application/json
      description: Удалить одного животного по id
      parameters:
      - description: id питомца
        in: path
        name: petId
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Успешное удаление или не ошибочное сообщение
          schema:
            type: string
        "400":
          description: Неверной формат структуры
          schema:
            type: string
        "401":
          description: Аутентификация не пройдена
          schema:
            type: string
        "403":
          description: Авторизация не пройдена
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Удалить животного по id
      tags:
      - pet
    get:
      consumes:
      - application/json
      description: Получить одного животного по id
      parameters:
      - description: id питомца
        in: path
        name: petId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Получить одного животного или не ошибочное сообщение
          schema:
            $ref: '#/definitions/internal_modules_pet_controller.OutputPet'
        "400":
          description: Неверной формат структуры
          schema:
            type: string
        "401":
          description: Аутентификация не пройдена
          schema:
            type: string
        "403":
          description: Авторизация не пройдена
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить животного по id
      tags:
      - pet
    post:
      consumes:
      - multipart/form-data
      description: Обновить только name и status.
      parameters:
      - description: Введи Id животного
        in: path
        name: petId
        required: true
        type: string
      - description: Имя питомца
        in: formData
        name: name
        required: true
        type: string
      - description: Статус питомца (available, sold, pending)
        in: formData
        name: status
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Успешное обновление информации или не ошибочное сообщение
          schema:
            type: string
        "400":
          description: Неверной формат
          schema:
            type: string
        "401":
          description: Аутентификация не пройдена
          schema:
            type: string
        "403":
          description: Авторизация не пройдена
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Обновить информацию о питомце
      tags:
      - pet
  /pet/findByStatus:
    get:
      consumes:
      - application/json
      description: Получить всех животных по статусу
      parameters:
      - description: Статус питомца (available, sold, pending)
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешное получение животных или не ошибочное сообщение
          schema:
            items:
              $ref: '#/definitions/internal_modules_pet_controller.OutputPetArray'
            type: array
        "400":
          description: Неверной формат
          schema:
            type: string
        "401":
          description: Аутентификация не пройдена
          schema:
            type: string
        "403":
          description: Авторизация не пройдена
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить всех животных по статусу
      tags:
      - pet
  /pet/photo/{petId}:
    post:
      consumes:
      - multipart/form-data
      description: Добавить фото конкретному питомцу, будет сохранено локально, адрес
        можете узнать в поле photoUrl
      parameters:
      - description: Введи id питомца
        in: path
        name: petId
        required: true
        type: string
      - description: Добавь изображение животного
        in: formData
        name: photoFile
        required: true
        type: file
      produces:
      - text/plain
      responses:
        "200":
          description: Успешное добавление фото или не ошибочное сообщение
          schema:
            type: string
        "400":
          description: Неверной формат
          schema:
            type: string
        "401":
          description: Аутентификация не пройдена
          schema:
            type: string
        "403":
          description: Авторизация не пройдена
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Добавить фото питомца
      tags:
      - pet
  /store/order:
    post:
      consumes:
      - application/json
      description: Создание заказа на животное. Отсчёт по id (не должен повторяться).
        Нулевые значения у полей integer не допускаются
      parameters:
      - description: Заполни все поля для размещения заказа
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/internal_modules_order_controller.Order'
      produces:
      - text/plain
      responses:
        "200":
          description: Успешное размещение заказа или не ошибочное сообщение
          schema:
            type: string
        "400":
          description: Неверной формат
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Разместить заказ на животное
      tags:
      - order
  /store/order/{orderId}:
    delete:
      consumes:
      - application/json
      description: Удалить заказ по Id
      parameters:
      - description: Введите id заказа
        in: path
        name: orderId
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Успешное удаление заказа или не ошибочное сообщение
          schema:
            type: string
        "400":
          description: Неверной формат структуры
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Удалить заказ по Id
      tags:
      - order
    get:
      consumes:
      - application/json
      description: Получить заказ по Id
      parameters:
      - description: Введите id заказа
        in: path
        name: orderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Структура заказа или не ошибочное сообщение
          schema:
            $ref: '#/definitions/internal_modules_order_controller.Order'
        "400":
          description: Неверной формат структуры
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Получить заказ по Id
      tags:
      - order
  /user/:
    post:
      consumes:
      - application/json
      description: Создание нового пользователя или восстановление удалённого с различными
        полями. Отсчёт будет идти от username (не должен повторяться)
      parameters:
      - description: Заполни все поля для регистрации
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_modules_user_controller.User'
      produces:
      - text/plain
      responses:
        "200":
          description: Успешная регистрация или не ошибочное сообщение
          schema:
            type: string
        "400":
          description: Неверной формат структуры
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Регистрация нового пользователя
      tags:
      - user
  /user/{username}:
    delete:
      consumes:
      - application/json
      description: Мягкое удаление пользователя (проставление даты)
      parameters:
      - description: Укажи username
        in: path
        name: username
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Успешное удаление или не ошибочное сообщение
          schema:
            type: string
        "400":
          description: Неверной формат
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Удаление пользователя
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Получить полную информацию о пользователе
      parameters:
      - description: Укажи username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешное получение информации или не ошибочное сообщение
          schema:
            $ref: '#/definitions/internal_modules_user_controller.User'
        "400":
          description: Неверной формат
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Получить информацию о пользователе
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Нельзя обновить на то имя пользователя, которое уже есть в базе
      parameters:
      - description: Укажи username
        in: path
        name: username
        required: true
        type: string
      - description: Заполни все поля для обновления информации
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_modules_user_controller.User'
      produces:
      - text/plain
      responses:
        "200":
          description: Успешное обновление информации или не ошибочное сообщение
          schema:
            type: string
        "400":
          description: Неверной формат
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Обновить информацию о пользователе
      tags:
      - user
  /user/createWithArray:
    post:
      consumes:
      - application/json
      description: Создание новой группы пользователей с различными полями. Отсчёт
        будет идти от username (не должен повторяться). Для восстановления аккаунта
        воспользуйтесь одиночной регистрацией
      parameters:
      - description: Заполни все поля для регистрации
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_modules_user_controller.UserArray'
      produces:
      - text/plain
      responses:
        "200":
          description: Успешная регистрация или не ошибочное сообщение
          schema:
            type: string
        "400":
          description: Неверной формат структуры
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Регистрация группы пользователей
      tags:
      - user
  /user/login:
    get:
      consumes:
      - application/json
      description: Создание токена jwt и отправка в заголовке для дальнейшей авторизации
      parameters:
      - description: Укажи username
        in: query
        name: username
        required: true
        type: string
      - description: Укажи пароль
        in: query
        name: password
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Успешный вход в систему или не ошибочное сообщение
          schema:
            type: string
        "400":
          description: Неверной формат
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Вход в систему
      tags:
      - user
  /user/logout:
    get:
      consumes:
      - application/json
      description: Аннулирование jwt токена с использованием black_list
      parameters:
      - description: Укажи username
        in: query
        name: username
        required: true
        type: string
      - description: Укажи пароль
        in: query
        name: password
        required: true
        type: string
      - description: Bearer токен доступа для имитации отправки браузером. Обязательно
          укажите Bearer перед вставкой токена
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Успешный выход из системы или не ошибочное сообщение
          schema:
            type: string
        "400":
          description: Неверной формат
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Выход из системы
      tags:
      - user
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
